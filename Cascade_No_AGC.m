clear all
clc

%Done at 8GHz only but can be vectorized for all frequencies
% pad1_ammount = 0;
% pad2_ammount = 0;
AGC_STATE = 'off';

switch1.pout = 37;
switch1.gain = -0.68;
switch1.NF = -switch1.gain;
switch1.OIP3 = 62;
switch1.name = 'HMC1118';

switch2.pout = 27;
switch2.gain = -0.75;
switch2.NF = -switch2.gain;
switch2.OIP3 = 58;
switch2.name = 'MASW-007107';

amp1.pout = 18;
amp1.gain = 16;
amp1.NF = 3;
amp1.OIP3 = 30;
amp1.name = 'AM1063-1';

filter1.pout = Inf;
filter1.gain = -1.4;
filter1.NF = -filter1.gain;
filter1.OIP3 = 99;
filter1.name = 'Band13_Filter';

limiter1.pout = 15;
limiter1.gain = -0.35;
limiter1.NF = -limiter1.gain;
limiter1.OIP3 = 30;
limiter1.name = 'MPL4701';

amp2.pout = 12;
amp2.gain = 13;
amp2.NF = 3;
amp2.OIP3 = 23;
amp2.name = 'GRF2004';

filter2.pout = Inf;
filter2.gain = -0.77;
filter2.NF = -filter2.gain;
filter2.OIP3 = 99;
filter2.name = 'LFCN-123+';

mixer1.pout = 9;
mixer1.gain = -6.5;
mixer1.NF = 7;
mixer1.OIP3 = 21 + mixer1.gain;
mixer1.name = 'ML1-0603ISM-2';

amp3.pout = 16.5;
amp3.gain = 18.5;
amp3.NF = 2.1;
amp3.OIP3 = 28;
amp3.name = 'CMD186';

% vva1.gain = -3 - pad1_ammount;
% vva1.pout = 23 + vva1.gain;
% vva1.NF = -vva1.gain;
% vva1.OIP3 = vva1.pout + 20;
% vva1.name = 'RFSA2113';

vva1.gain_range = 30;
vva1.initial_attenuation = 0;
vva1.base_loss = 3;
vva1.base_pin = 23;
vva1.base_OIP3 = 20;
vva1.name = 'RFSA2113';

filter3.pout = Inf;
filter3.gain = -6;
filter3.NF = -filter3.gain;
filter3.OIP3 = 99;
filter3.name = 'DLI8310';

amp4.pout = 19;
amp4.gain = 15;
amp4.NF = 5.2;
amp4.OIP3 = amp4.pout + 10.6;
amp4.name = 'HMC441LC3B';

filter4.pout = Inf;
filter4.gain = -0.66;
filter4.NF = -filter4.gain;
filter4.OIP3 = 99;
filter4.name = 'LFCW-1142+';

mixer2.pout = 14;
mixer2.gain = -9;
mixer2.NF = 10;
mixer2.OIP3 = 23 + mixer2.gain;
mixer2.name = 'MM1-0424SSM-2';

diplexer1.pout = Inf;
diplexer1.gain = -0.66;
diplexer1.NF = -diplexer1.gain;
diplexer1.OIP3 = 99;
diplexer1.name = 'Custom Diplexer';

switch3.pout = 30;
switch3.gain = -0.9;
switch3.NF = -switch3.gain;
switch3.OIP3 = 43;
switch3.name = 'SKY13267-321';

amp5.pout = 19;
amp5.gain = 16.5;
amp5.NF = 2.5;
amp5.OIP3 = 30;
amp5.name = 'Custom_HBT_Amps';

% vva2.gain = -1 - pad2_ammount;
% vva2.pout = 24 + vva2.gain;
% vva2.NF = -vva2.gain;
% vva2.OIP3 = vva2.pout + 17;
% vva2.name = 'RFSA2033';

vva2.gain_range = 30;
vva2.initial_attenuation = 0;
vva2.base_loss = 1;
vva2.base_pin = 24;
vva2.base_OIP3 = 17;
vva2.name = 'RFSA2033';

filter5.pout = Inf;
filter5.gain = -6;
filter5.NF = -filter5.gain;
filter5.OIP3 = 99;
filter5.name = 'Custom Filter';

amp6.pout = 18.5;
amp6.gain = 18.5;
amp6.NF = 3.7;
amp6.OIP3 = 41;
amp6.name = 'SBB2089Z';

switch4.pout = 27;
switch4.gain = -0.35;
switch4.NF = -switch4.gain;
switch4.OIP3 = 49;
switch4.name = 'SKY13323-378LF';

switch5.pout = 31;
switch5.gain = -1.2;
switch5.NF = -switch5.gain;
switch5.OIP3 = 57;
switch5.name = 'PE42540';

amp7.pout = 19;
amp7.gain = 15;
amp7.NF = 4.2;
amp7.OIP3 = 40;
amp7.name = 'SBB1089Z';

%START CONVERTER
%If you don't have a converter you need to specify receiver.pout
v_pkpk = 1.75;
AD9250.pout = 10*log10(power((v_pkpk / 2) / sqrt(2), 2) / (50*0.001)); %FS in dBm
AD9250.name = 'converter';

%Just make these both NaN if you don't want to calculate OIP3 from
%Measurements but you must then specify OIP3 directly below
AD9250.IMD3_power_dBc = -100;
AD9250.IMD3_power_dBFS = -8;

AD9250.OIP3 = NaN;

%Just make these three NaN if you don't want to calculate NF from
%Measurements but you must then specify ENOB directly below
AD9250.SNR_dB = 70;
AD9250.SNR_power_dBFS = -1;
AD9250.SNR_sample_rate_Hz = 250e6;

AD9250.ENOB = NaN; %11
%END CONVERTER

receiver.channel_bandwidth = 100e6;
receiver.sample_rate = AD9250.SNR_sample_rate_Hz;
receiver.radio_bandwidth = 1.86e9; %6000-4140 is the widest preselect filter bandwidth
receiver.antenna_noise_temperature = 16.8;
receiver.temperature = 16.8;
receiver.waveform_PAPR = 8;

%If you don't want to specify or don't have this just put NaN otherwise put
%a number
receiver.next_largest_signal_dBm = NaN;

%If you specify pout then you will solve the cascade based on the output
%power set, PAPR, etc... for the input power
%If you specify pin then you will solve the cascade based on the input
%power set
%Also note that any time you specify a converter at the end of the chain it
%will have an associated pout and will solve from output to input
receiver.pout = NaN;
receiver.pin = NaN;

cascade = {switch1 switch2 switch2 limiter1 amp1 ...
           switch2 switch2 switch2 filter1 switch2 switch2 limiter1 ...
           amp2 switch2 switch2 filter2 mixer1 switch2 amp3 switch2 ...
           vva1 filter3 switch2 amp4 switch2 filter4 mixer2 ...
           diplexer1 switch3 amp5 switch3 vva2 filter4 switch3 amp6 switch3 filter4 switch4 ...
           switch5 switch5 amp7 AD9250};

SDR.no_AGC_with_Preamp = cascade;

cascade = {switch1 switch2    ...
           switch2 switch2 filter1 switch2 switch2 limiter1 ...
           amp2 switch2 switch2 filter2 mixer1 switch2 amp3 switch2 ...
           vva1 filter3 switch2 amp4 switch2 filter4 mixer2 ...
           diplexer1 switch3 amp5 switch3 vva2 filter4 switch3 amp6 switch3 filter4 switch4 ...
           switch5 switch5 amp7 AD9250};

SDR.no_AGC_no_Preamp = cascade;

SDR.no_AGC_with_Preamp = solve_agc(SDR.no_AGC_with_Preamp, receiver, AGC_STATE);
results = calculate_cascade_parameters(SDR.no_AGC_with_Preamp, receiver);

[figure1 axes1] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.sensitivity, 'with pre-amp', ...
                              'At Ouput Of', 'sensitivity (dBm)', ...
                              'sensitivity vs stage', [], [], [], [])

[figure2 axes2] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.SFDR, 'with pre-amp', ...
                              'At Ouput Of', 'SFDR (dB)', ...
                              'SFDR vs stage', [], [], [], [])

[figure3 axes3] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.DFDR, 'with pre-amp', ...
                              'At Ouput Of', 'DFDR (dBm)', ...
                              'DFDR vs stage', [], [], [], [])

[figure4 axes4] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.cumulative_gain, 'Cumulative Gain (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure4 axes4] = create_plot(figure4, axes4, SDR.no_AGC_with_Preamp, ...
                              results.cumulative_gain_ideal, 'Ideal Cumulative Gain (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure5 axes5] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.cumulative_NF, 'Cumulative NF (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure5 axes5] = create_plot(figure5, axes5, SDR.no_AGC_with_Preamp, ...
                              results.cumulative_NF_ideal, 'Ideal Cumulative NF (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure6 axes6] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.cumulative_OIP3, 'Cumulative OIP3 (dBm) with pre-amp', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure6 axes6] = create_plot(figure6, axes6, SDR.no_AGC_with_Preamp, ...
                              results.cumulative_OIP3_ideal, 'Ideal Cumulative OIP3 (dBm) with pre-amp', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure7 axes7] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.pout, 'Signal Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure7 axes7] = create_plot(figure7, axes7, SDR.no_AGC_with_Preamp, ...
                              results.secondary_signal_pout, 'Interfering Signal Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.distortion_power, 'Distortion Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, SDR.no_AGC_with_Preamp, ...
                              results.radio_noise_power, 'Radio Noise Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, SDR.no_AGC_with_Preamp, ...
                              results.in_band_power, 'Total Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure9 axes9] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.gain_compression, 'Gain Compression (dB) with pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, SDR.no_AGC_with_Preamp, ...
                              results.cumulative_gain_compression, 'Cumulative Gaib Compression (dB) with pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, SDR.no_AGC_with_Preamp, ...
                              results.headroom, 'Headroom (dB) with pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure10 axes10] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.linear_noise_density, 'Linear Noise Density (dBm/Hz) with pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, SDR.no_AGC_with_Preamp, ...
                              results.non_linear_noise_density, 'Non-Linear Noise Density (dBm/Hz) with pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, SDR.no_AGC_with_Preamp, ...
                              results.stage_noise_density, 'Total Noise Density (dBm/Hz) with pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure11 axes11] = create_plot([], [], SDR.no_AGC_with_Preamp, ...
                              results.processed_snr, 'SNR (dB) with pre-amp', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])

[figure11 axes11] = create_plot(figure11, axes11, SDR.no_AGC_with_Preamp, ...
                              results.processed_snr_without_nonlinear_degradation, 'Ideal SNR (dB) with pre-amp', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])

SDR.no_AGC_no_Preamp = solve_agc(SDR.no_AGC_no_Preamp, receiver, AGC_STATE);
results = calculate_cascade_parameters(SDR.no_AGC_no_Preamp, receiver);

[figure1 axes1] = create_plot(figure1, axes1, SDR.no_AGC_no_Preamp, ...
                              results.sensitivity, 'without pre-amp', ...
                              'At Ouput Of', 'sensitivity (dBm)', ...
                              'sensitivity vs stage', [], [], [], [])

[figure2 axes2] = create_plot(figure2, axes2, SDR.no_AGC_no_Preamp, ...
                              results.SFDR, 'without pre-amp', ...
                              'At Ouput Of', 'SFDR (dB)', ...
                              'SFDR vs stage', [], [], [], [])

[figure3 axes3] = create_plot(figure3, axes3, SDR.no_AGC_no_Preamp, ...
                              results.DFDR, 'without pre-amp', ...
                              'At Ouput Of', 'DFDR (dBm)', ...
                              'DFDR vs stage', [], [], [], [])

[figure4 axes4] = create_plot(figure4, axes4, SDR.no_AGC_no_Preamp, ...
                              results.cumulative_gain, 'Cumulative Gain (dB) without pre-amp', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure4 axes4] = create_plot(figure4, axes4, SDR.no_AGC_no_Preamp, ...
                              results.cumulative_gain_ideal, 'Ideal Cumulative Gain (dB) without pre-amp', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure5 axes5] = create_plot(figure5, axes5, SDR.no_AGC_no_Preamp, ...
                              results.cumulative_NF, 'Cumulative NF (dB) without pre-amp', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure5 axes5] = create_plot(figure5, axes5, SDR.no_AGC_no_Preamp, ...
                              results.cumulative_NF_ideal, 'Ideal Cumulative NF (dB) without pre-amp', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure6 axes6] = create_plot(figure6, axes6, SDR.no_AGC_no_Preamp, ...
                              results.cumulative_OIP3, 'Cumulative OIP3 (dBm) without pre-amp', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure6 axes6] = create_plot(figure6, axes6, SDR.no_AGC_no_Preamp, ...
                              results.cumulative_OIP3_ideal, 'Ideal Cumulative OIP3 (dBm) without pre-amp', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure7 axes7] = create_plot(figure7, axes7, SDR.no_AGC_no_Preamp, ...
                              results.pout, 'Signal Power (dBm) without pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure7 axes7] = create_plot(figure7, axes7, SDR.no_AGC_no_Preamp, ...
                              results.secondary_signal_pout, 'Interfering Signal Power (dBm) without pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, SDR.no_AGC_no_Preamp, ...
                              results.distortion_power, 'Distortion Power (dBm) without pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, SDR.no_AGC_no_Preamp, ...
                              results.radio_noise_power, 'Radio Noise Power (dBm) without pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, SDR.no_AGC_no_Preamp, ...
                              results.in_band_power, 'Total Power (dBm) without pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, SDR.no_AGC_no_Preamp, ...
                              results.gain_compression, 'Gain Compression (dB) without pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, SDR.no_AGC_no_Preamp, ...
                              results.headroom, 'Headroom (dB) without pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, SDR.no_AGC_no_Preamp, ...
                              results.linear_noise_density, 'Linear Noise Density (dBm/Hz) without pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, SDR.no_AGC_no_Preamp, ...
                              results.non_linear_noise_density, 'Non-Linear Noise Density (dBm/Hz) without pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, SDR.no_AGC_no_Preamp, ...
                              results.stage_noise_density, 'Total Noise Density (dBm/Hz) without pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure11 axes11] = create_plot(figure11, axes11, SDR.no_AGC_no_Preamp, ...
                              results.processed_snr, 'SNR (dB) without pre-amp', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])

[figure11 axes11] = create_plot(figure11, axes11, SDR.no_AGC_no_Preamp, ...
                              results.processed_snr_without_nonlinear_degradation, 'Ideal SNR (dB) without pre-amp', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])
