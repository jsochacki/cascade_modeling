clear all
clc

amp1.pout = 17.8;
amp1.gain = 11.7;
amp1.NF = 0.66;
amp1.OIP3 = 23.9;
amp1.name = 'LNA1-SAV-541-D+';

amp2.pout = 14.7;
amp2.gain = 20;
amp2.NF = 1.5;
amp2.OIP3 = 23.6;
amp2.name = 'LNA2-TSS-53LNB3+';

%Right now any passives should have Inf for pout so that the program knows
%not to calculate nonlinear gain parameters for them since they are passives
pad1.pout = Inf;
pad1.gain = -5;
pad1.NF = -pad1.gain;
pad1.OIP3 = 99;
pad1.name = 'PAD1';

%START CONVERTER
%If you don't have a converter you need to specify receiver.pout
converter.pout = 10; %FS in dBm
converter.name = 'converter';

%Just make these both NaN if you don't want to calculate OIP3 from
%Measurements but you must then specify OIP3 directly below
converter.IMD3_power_dBc = -77;
converter.IMD3_power_dBFS = -7;

converter.OIP3 = NaN;

%Just make these three NaN if you don't want to calculate NF from
%Measurements but you must then specify ENOB directly below
converter.SNR_dB = 74;
converter.SNR_power_dBFS = -1;
converter.SNR_sample_rate_Hz = 800e6;

converter.ENOB = NaN;
%END CONVERTER

receiver.channel_bandwidth = 100e6;
receiver.sample_rate = 800e6;
receiver.radio_bandwidth = 3e9;
receiver.antenna_noise_temperature = 16.8;
receiver.temperature = 16.8;
receiver.waveform_PAPR = 8;

%If you don't want to specify or don't have this just put NaN otherwise put
%a number
receiver.next_largest_signal_dBm = NaN;

%If you specify pout then you will solve the cascade based on the output
%power set, PAPR, etc... for the input power
%If you specify pin then you will solve the cascade based on the input
%power set
%Also note that any time you specify a converter at the end of the chain it
%will have an associated pout and will solve from output to input
receiver.pout = 10;
receiver.pin = NaN;

cascade = {pad1 amp1 amp2 amp2};
cascade = {pad1 amp1 amp2 amp2 converter};
cascade = {amp1 pad1 amp2 amp2 converter};

results = calculate_cascade_parameters(cascade, receiver);


[figure1 axes1] = create_plot([], [], cascade, ...
                              results.sensitivity, 'No Interferer', ...
                              'At Ouput Of', 'sensitivity (dBm)', ...
                              'sensitivity vs stage', [], [], [], [])

[figure2 axes2] = create_plot([], [], cascade, ...
                              results.SFDR, 'No Interferer', ...
                              'At Ouput Of', 'SFDR (dB)', ...
                              'SFDR vs stage', [], [], [], [])

[figure3 axes3] = create_plot([], [], cascade, ...
                              results.DFDR, 'No Interferer', ...
                              'At Ouput Of', 'DFDR (dBm)', ...
                              'DFDR vs stage', [], [], [], [])

[figure4 axes4] = create_plot([], [], cascade, ...
                              results.cumulative_gain, 'No Interferer', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure4 axes4] = create_plot(figure4, axes4, cascade, ...
                              results.cumulative_gain, 'No Interferer', ...
                              'At Ouput Of', 'Ideal Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure5 axes5] = create_plot([], [], cascade, ...
                              results.cumulative_NF, 'No Interferer', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure5 axes5] = create_plot(figure5, axes5, cascade, ...
                              results.cumulative_NF_ideal, 'No Interferer', ...
                              'At Ouput Of', 'Ideal Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure6 axes6] = create_plot([], [], cascade, ...
                              results.cumulative_OIP3, 'No Interferer', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure6 axes6] = create_plot(figure6, axes6, cascade, ...
                              results.cumulative_OIP3_ideal, 'No Interferer', ...
                              'At Ouput Of', 'Ideal Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure7 axes7] = create_plot([], [], cascade, ...
                              results.pout, 'No Interferer', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure7 axes7] = create_plot(figure7, axes7, cascade, ...
                              results.secondary_signal_pout, 'No Interferer', ...
                              'At Ouput Of', 'Interfering Signal Power (dBm)', ...
                              'Interfering Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot([], [], cascade, ...
                              results.distortion_power, 'No Interferer', ...
                              'At Ouput Of', 'Distortion Power (dBm)', ...
                              'Distortion Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, cascade, ...
                              results.radio_noise_power, 'No Interferer', ...
                              'At Ouput Of', 'Radio Noise Power (dBm)', ...
                              'Radio Noise Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, cascade, ...
                              results.in_band_power, 'No Interferer', ...
                              'At Ouput Of', 'Total Power (dBm)', ...
                              'Total Power vs stage', [], [], [], [])

[figure9 axes9] = create_plot([], [], cascade, ...
                              results.gain_compression, 'No Interferer', ...
                              'At Ouput Of', 'Gain Compression (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, cascade, ...
                              results.headroom, 'No Interferer', ...
                              'At Ouput Of', 'Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure10 axes10] = create_plot([], [], cascade, ...
                              results.linear_noise_density, 'No Interferer', ...
                              'At Ouput Of', 'Linear Noise Density (dBm/Hz)', ...
                              'Linear Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, cascade, ...
                              results.non_linear_noise_density, 'No Interferer', ...
                              'At Ouput Of', 'Non-Linear Noise Density (dBm/Hz)', ...
                              'Non-Linear Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, cascade, ...
                              results.stage_noise_density, 'No Interferer', ...
                              'At Ouput Of', 'Total Noise Density (dBm/Hz)', ...
                              'Total Noise Density vs stage', [], [], [], [])

[figure11 axes11] = create_plot([], [], cascade, ...
                              results.processed_snr, 'No Interferer', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])

[figure11 axes11] = create_plot(figure11, axes11, cascade, ...
                              results.processed_snr_without_nonlinear_degradation, 'No Interferer', ...
                              'At Ouput Of', 'Ideal SNR (dB)', ...
                              'Ideal SNR vs stage', [], [], [], [])

[figure1 axes1] = create_plot(figure1, axes1, cascade, ...
                              results.sensitivity, '-50 dBm Interferer', ...
                              'At Ouput Of', 'sensitivity (dBm)', ...
                              'sensitivity vs stage', [], [], [], [])

[figure2 axes2] = create_plot(figure2, axes2, cascade, ...
                              results.SFDR, '-50 dBm Interferer', ...
                              'At Ouput Of', 'SFDR (dB)', ...
                              'SFDR vs stage', [], [], [], [])

[figure3 axes3] = create_plot(figure3, axes3, cascade, ...
                              results.DFDR, '-50 dBm Interferer', ...
                              'At Ouput Of', 'DFDR (dBm)', ...
                              'DFDR vs stage', [], [], [], [])

[figure4 axes4] = create_plot(figure4, axes4, cascade, ...
                              results.cumulative_gain, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure4 axes4] = create_plot(figure4, axes4, cascade, ...
                              results.cumulative_gain, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Ideal Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure5 axes5] = create_plot(figure5, axes5, cascade, ...
                              results.cumulative_NF, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure5 axes5] = create_plot(figure5, axes5, cascade, ...
                              results.cumulative_NF_ideal, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Ideal Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure6 axes6] = create_plot(figure6, axes6, cascade, ...
                              results.cumulative_OIP3, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure6 axes6] = create_plot(figure6, axes6, cascade, ...
                              results.cumulative_OIP3_ideal, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Ideal Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure7 axes7] = create_plot(figure7, axes7, cascade, ...
                              results.pout, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure7 axes7] = create_plot(figure7, axes7, cascade, ...
                              results.secondary_signal_pout, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Interfering Signal Power (dBm)', ...
                              'Interfering Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, cascade, ...
                              results.distortion_power, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Distortion Power (dBm)', ...
                              'Distortion Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, cascade, ...
                              results.radio_noise_power, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Radio Noise Power (dBm)', ...
                              'Radio Noise Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, cascade, ...
                              results.in_band_power, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Total Power (dBm)', ...
                              'Total Power vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, cascade, ...
                              results.gain_compression, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Gain Compression (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, cascade, ...
                              results.headroom, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, cascade, ...
                              results.linear_noise_density, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Linear Noise Density (dBm/Hz)', ...
                              'Linear Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, cascade, ...
                              results.non_linear_noise_density, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Non-Linear Noise Density (dBm/Hz)', ...
                              'Non-Linear Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, cascade, ...
                              results.stage_noise_density, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Total Noise Density (dBm/Hz)', ...
                              'Total Noise Density vs stage', [], [], [], [])

[figure11 axes11] = create_plot(figure11, axes11, cascade, ...
                              results.processed_snr, '-50 dBm Interferer', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])

[figure11 axes11] = create_plot(figure11, axes11, cascade, ...
                              results.processed_snr_without_nonlinear_degradation, '-50 dBm Interferer', ...
                              'At Ouput Of', 'Ideal SNR (dB)', ...
                              'Ideal SNR vs stage', [], [], [], [])
