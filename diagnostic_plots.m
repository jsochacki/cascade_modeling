function [] = diagnostic_plots(cascade, results)


[figure1 axes1] = create_plot([], [], cascade, ...
                              results.sensitivity, 'with pre-amp', ...
                              'At Ouput Of', 'sensitivity (dBm)', ...
                              'sensitivity vs stage', [], [], [], [])

[figure2 axes2] = create_plot([], [], cascade, ...
                              results.SFDR, 'with pre-amp', ...
                              'At Ouput Of', 'SFDR (dB)', ...
                              'SFDR vs stage', [], [], [], [])

[figure3 axes3] = create_plot([], [], cascade, ...
                              results.DFDR, 'with pre-amp', ...
                              'At Ouput Of', 'DFDR (dBm)', ...
                              'DFDR vs stage', [], [], [], [])

[figure4 axes4] = create_plot([], [], cascade, ...
                              results.cumulative_gain, 'Cumulative Gain (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure4 axes4] = create_plot(figure4, axes4, cascade, ...
                              results.cumulative_gain_ideal, 'Ideal Cumulative Gain (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative Gain (dB)', ...
                              'Gain vs stage', [], [], [], [])

[figure5 axes5] = create_plot([], [], cascade, ...
                              results.cumulative_NF, 'Cumulative NF (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure5 axes5] = create_plot(figure5, axes5, cascade, ...
                              results.cumulative_NF_ideal, 'Ideal Cumulative NF (dB) with pre-amp', ...
                              'At Ouput Of', 'Cumulative NF (dB)', ...
                              'NF vs stage', [], [], [], [])

[figure6 axes6] = create_plot([], [], cascade, ...
                              results.cumulative_OIP3, 'Cumulative OIP3 (dBm) with pre-amp', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure6 axes6] = create_plot(figure6, axes6, cascade, ...
                              results.cumulative_OIP3_ideal, 'Ideal Cumulative OIP3 (dBm) with pre-amp', ...
                              'At Ouput Of', 'Cumulative OIP3 (dBm)', ...
                              'OIP3 vs stage', [], [], [], [])

[figure7 axes7] = create_plot([], [], cascade, ...
                              results.pout, 'Signal Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure7 axes7] = create_plot(figure7, axes7, cascade, ...
                              results.secondary_signal_pout, 'Interfering Signal Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot([], [], cascade, ...
                              results.distortion_power, 'Distortion Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, cascade, ...
                              results.radio_noise_power, 'Radio Noise Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure8 axes8] = create_plot(figure8, axes8, cascade, ...
                              results.in_band_power, 'Total Power (dBm) with pre-amp', ...
                              'At Ouput Of', 'Signal Power (dBm)', ...
                              'Signal Power vs stage', [], [], [], [])

[figure9 axes9] = create_plot([], [], cascade, ...
                              results.gain_compression, 'Gain Compression (dB) with pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, cascade, ...
                              results.cumulative_gain_compression, 'Cumulative Gaib Compression (dB) with pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure9 axes9] = create_plot(figure9, axes9, cascade, ...
                              results.headroom, 'Headroom (dB) with pre-amp', ...
                              'At Ouput Of', 'Gain Compression / Headroom (dB)', ...
                              'Gain Compression / Headroom vs stage', [], [], [], [])

[figure10 axes10] = create_plot([], [], cascade, ...
                              results.linear_noise_density, 'Linear Noise Density (dBm/Hz) with pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, cascade, ...
                              results.non_linear_noise_density, 'Non-Linear Noise Density (dBm/Hz) with pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure10 axes10] = create_plot(figure10, axes10, cascade, ...
                              results.stage_noise_density, 'Total Noise Density (dBm/Hz) with pre-amp', ...
                              'At Ouput Of', 'Noise Density (dBm/Hz)', ...
                              'Noise Density vs stage', [], [], [], [])

[figure11 axes11] = create_plot([], [], cascade, ...
                              results.processed_snr, 'SNR (dB) with pre-amp', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])

[figure11 axes11] = create_plot(figure11, axes11, cascade, ...
                              results.processed_snr_without_nonlinear_degradation, 'Ideal SNR (dB) with pre-amp', ...
                              'At Ouput Of', 'SNR (dB)', ...
                              'SNR vs stage', [], [], [], [])

end